name: Build Kernel with KernelSu
on:
  workflow_dispatch:
     inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'https://github.com/Three-taile-dragon/android_kernel_oneplus_sdm845-mcd'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'mcd-CUSTOM-S'
      KERNEL_BUILD_BASH:
        description: 'Kernel Build Bash'
        required: true
        default: 'https://github.com/Three-taile-dragon/android_kernel_oneplus_sdm845-mcd/raw/mcd-CUSTOM-S/build_kernel.sh'
      KERNEL_DEFCONFIG_PATH:
        description: 'Kernel Defconfig Path'
        required: true
        default: 'arch/arm64/configs/vendor/mcd_defconfig'

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest
    steps:
    - name: Setup build kernel environment 初始化环境变量
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        cd $GITHUB_WORKSPACE
        mkdir kernel_workspace && cd kernel_workspace
        sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig -y
        git config --global user.name "Github Action"
        git config --global user.email "Action@github.com"
        mkdir toolchains
        git clone https://gitlab.com/EndCredits/clang-crepuscular.git --depth=1 ./toolchains/clang-crepuscular
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/toolchains/clang-crepuscular/bin:$PATH
        clang --version
    - name: Download kernel source 下载内核资源
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1
    - name: Download kernel build config 下载内核构建配置
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        wget -O build.sh ${{ github.event.inputs.KERNEL_BUILD_BASH }}
    - name: Setup KernelSU 初始化KernelSU配置
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/Three-taile-dragon/KernelSU/dev/kernel/setup.sh" | bash -
        echo "CONFIG_KPROBES=y" >> ${{ github.event.inputs.KERNEL_DEFCONFIG_PATH }}
        echo "CONFIG_HAVE_KPROBES=y" >> ${{ github.event.inputs.KERNEL_DEFCONFIG_PATH }}
        echo "CONFIG_KPROBE_EVENTS=y" >> ${{ github.event.inputs.KERNEL_DEFCONFIG_PATH }}
    - name: Build Kernel and Gen AnyKernel.zip 构建内核并生成AnyKernel.zip
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/toolchains/clang-crepuscular/bin:$PATH
       # chmod 777 ./build.sh
       # ./build.sh all
    - name: Debugging with tmate 远程调试 手动运行构建脚本
      uses: mxschmitt/action-tmate@v3.14
    - name: Upload AnyKernel.zip 上传内核替换包(直接在REC刷入)
      uses: actions/upload-artifact@v3
      with:
        name: KernelSu-${{ env.BUILD_TIME }}.zip
        path: kernel_workspace/out/AnyKernel3/kernelsu-anykernel.zip

    - name: Collect Outputs 收集所有输出文件
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        zip -r output.zip ./out
    - name: Upload Outputs 上传输出文件
      uses: actions/upload-artifact@v3
      with:
        name: KernelSu-Outputs-${{ env.BUILD_TIME }}.zip
        path: kernel_workspace/output.zip
